;; Set default font
(custom-set-faces
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 100 :width normal :foundry "unknown" :family "Roboto Mono")))))

(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; ============================================================================
;; ==== General ====
;; ============================================================================
(setq inhibit-startup-message   t)   ; disable startup messages
(setq make-backup-files         nil) ; disable creating of backup files 
(setq auto-save-list-file-name  nil) ; disable creating of .saves files 
(setq auto-save-default         nil) ; disable automatic saving 
(require 'paren) (show-paren-mode t) ; highlight matching parentheses
(setq-default indent-tabs-mode nil)  ; set spaces instead of tabs by default
(setq-default truncate-lines nil)    ; don't truncate lines if they are too long
(setq line-number-mode t)            ; show line number in status line
(setq column-number-mode t)          ; show column number in status line
(setq scroll-step           1)       ; scroll by one line instead of page
(setq scroll-conservatively 10000)

(add-to-list 'load-path "~/.emacs.d/lisp")

;; ============================================================================
;; ===== Coding system ====
;; ============================================================================
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)

;; ============================================================================
;; ===== Auto Fill mode =====
;; ============================================================================
; The fill column influences how Emacs justifies paragraphs. 
; For best results choose a value less than 80
(setq-default fill-column 78)
(auto-fill-mode 1)

;; ============================================================================
;; ===== Windows (buffers) =====
;; ============================================================================
;; Keep single buffer visible when switching between buffers
(add-hook 'window-setup-hook 'delete-other-windows)
(setq pop-up-windows nil)

;; ============================================================================
;; ==== Key bindings ====
;; ============================================================================

; Functions
(defun Kill-Active-Buffer ()
  (interactive)
  (kill-buffer (current-buffer))
  )

(defun Build-Project ()
  "Saves all unsaved buffers, and runs 'compile'."
  (interactive)
  (save-some-buffers t)
  (compile "make")
  )

(defun Build-Install-Project ()
  "Saves all unsaved buffers, and runs 'make install'."
  (interactive)
  (save-some-buffers t)
  (let ((default-directory desktop-dirname))
    (compile "make install"))  
  )

(global-set-key [C-home] 'beginning-of-buffer)
(global-set-key [C-end]  'end-of-buffer)

(global-set-key [f2]   'save-buffer)             ; Save file (C-x C-s)
(global-set-key [f3]   'find-file)               ; Open file (C-x C-f)
(global-set-key [S-f3] 'desktop-change-dir)
(global-set-key [f5]   'previous-buffer)         ; Switch to pervious buffer
(global-set-key [f6]   'next-buffer)             ; Switch to next buffer
(global-set-key [f7]   'replace-string)          ; Replace string with string
(global-set-key [f8]   'next-error)
(global-set-key "\M-b" 'Build-Project)           ; make
(global-set-key "\M-B" 'Build-Install-Project)   ; make install
(global-set-key [f10]  'Kill-Active-Buffer)      ; Close buffer

; Cut
;;(global-set-key [S-delete])

;; Window resizing
(global-set-key (kbd "S-C-<left>")  'shrink-window-horizontally)
(global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "S-C-<down>")  'shrink-window)
(global-set-key (kbd "S-C-<up>")    'enlarge-window)

;; Copy
(global-set-key [C-kp-insert] 'copy-region-as-kill)
(global-set-key [C-kp-0]      'copy-region-as-kill)
(global-set-key "\M-c"        'copy-region-as-kill)

;; Paste
(global-set-key [S-kp-insert] 'yank)
(global-set-key [S-kp-0]      'yank)
(global-set-key "\M-v"        'yank)

;; Indent
(global-set-key [M-return]         'c-indent-new-comment-line)
(global-set-key [(control c) tab]  'indent-relative-maybe)
(global-set-key [S-iso-lefttab]    'indent-relative-maybe)
;; (global-set-key [S-iso-lefttab] 'indent-relative)

;; ============================================================================
;; ==== Mouse ====
;; ============================================================================
(if (eq window-system 'x)
    (progn
      (setq mouse-wheel-scroll-amount '(2))
      (setq mouse-wheel-progressive-speed nil)
      )
)

;; ============================================================================
;; ==== Buffers ====
;; ============================================================================
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-default-sorting-mode 'filename/process)
(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
(global-set-key [\M-kp-multiply] 'switch-to-previous-buffer)

;; ============================================================================
;; ===== Programming (c-mode) =====
;; ============================================================================
(add-hook 'c-mode-common-hook
          (lambda()
            (electric-indent-mode)
            ;; = Folding =
            (setq hs-hide-comments-when-hiding-all nil)
            (hs-minor-mode t)
            (hs-hide-all)
            (defadvice goto-line (after expand-after-goto-line activate compile)
              "opens folding collapsed block on goto-line (M-g g)"
              (save-excursion (hs-show-block)))
            (global-set-key [\M-up] 'hs-hide-block)
            (global-set-key [\M-down] 'hs-show-block)
            (global-set-key "\M-{" 'hs-hide-block)
            (global-set-key "\M-}" 'hs-show-block)
            ;; = clang code completion =
            (company-mode)
            ;; = Entry for GNUstep ChangeLog file =
            (setq add-log-full-name "Insert your name in ~/.emacs")
            (setq add-log-mailing-address "Insert your e-mail in ~/.emacs")
            (global-set-key [C-f12] 'add-change-log-entry)
            ;; = Compilation =
            (setq compilation-scroll-output 1)
            (setq compilation-read-command t)
            )
          )

;; ============================================================================
;; ==== Objective C customizations ====
;; ============================================================================

;; = Objective-C Header Detection =
;; By default, Emacs will enter C mode when opening any file ending in .h. 
;; We want Objective-C headers to be opened in objc-mode.
(add-to-list 'magic-mode-alist
             `(,(lambda ()
                  (and (string= (file-name-extension buffer-file-name) "h")
                       (re-search-forward "@\\<interface\\>" 
                                          magic-mode-regexp-match-limit t)))
               . objc-mode))
;; = Obj-C switch between header and source (Shortcut: C-c t) =
(defun objc-in-header-file ()
  (let* ((filename (buffer-file-name))
         (extension (car (last (split-string filename "\\.")))))
    (string= "h" extension)))

(defun objc-jump-to-extension (extension)
  (let* ((filename (buffer-file-name))
         (file-components (append (butlast (split-string filename
                                                         "\\."))
                                  (list extension))))
    (find-file (mapconcat 'identity file-components "."))))

; Assumes that Header and Source file are in same directory
(defun objc-jump-between-header-source ()
  (interactive)
  (if (objc-in-header-file)
      (objc-jump-to-extension "m")
    (objc-jump-to-extension "h")))

(defun objc-mode-customizations ()
  (define-key objc-mode-map (kbd "C-c t") 'objc-jump-between-header-source)
  (font-lock-add-keywords nil
                          '(("\\(@property\\|@synthesize\\)" 1 font-lock-keyword-face)
                            ("\\(readonly\\|readwrite\\|setter\\|getter\\)" . font-lock-keyword-face))))

(add-hook 'objc-mode-hook 'objc-mode-customizations)

;; ============================================================================
;; ==== company-clang + ObjC ====
;; ============================================================================
(add-to-list 'load-path "~/.emacs.d/elpa/company-0.9.12")
(require 'company)
(setq company-clang-arguments 
      (split-string 
       (shell-command-to-string "gnustep-config --objc-flags|tr -d '\n'") "\s"))
(global-set-key (kbd "M-/") 'company-clang)

;; ============================================================================
;; ===== Terminal mode specific settings =====
;; ============================================================================
(if (eq window-system nil)
    (progn
      (load-theme 'tsdh-dark)
      (global-set-key [select] 'move-end-of-line)
      (menu-bar-mode 0)
      )
  )

;; ============================================================================
;; ===== Settings specific to X Window =====
;; ============================================================================
(if (or (eq window-system 'x) (eq window-system 'w32))
    (progn
      (tool-bar-mode -1)                   ; Disable toolbar
      (add-to-list 'default-frame-alist '(foreground-color . "gray80"))
      ;; (add-to-list 'default-frame-alist '(background-color . "#1e2029"))
      (add-to-list 'default-frame-alist '(background-color . "#212121"))
      (add-to-list 'default-frame-alist '(cursor-color . "Magenta"))
      (add-to-list 'default-frame-alist '(scroll-bar-width . 13))
      (set-scroll-bar-mode 'right)
      ;; (setq-default scroll-bar-width 13)
      (set-face-background 'scroll-bar "#c600b2d2a87e")
      (set-face-foreground 'mode-line "black")
      (set-face-background 'mode-line "#aaaaaa")
      ;; (set-face-background 'modeline-inactive "light blue")
      (blink-cursor-mode 0)
      (setq mouse-wheel-scroll-amount '(2))
      (setq mouse-wheel-progressive-speed nil)
      )
  )

;; ============================================================================
;; ==== Session saving ====
;; ============================================================================
;; With these settings emacs leaves .emacs.desktop file inside working 
;; directory. Working directory must be set with 'desktop-change-dir'
;; function.
  (desktop-save-mode 1)
  (setq desktop-path (list "./"))
  (add-to-list 'desktop-globals-to-save '(default-directory))
  (add-to-list 'desktop-locals-to-save  '(default-directory))
;)
;; ============================================================================
;; ==== History  =====
;; ============================================================================
(savehist-mode 1)
(setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))

;; ============================================================================
;; ==== Org mode ====
;; ============================================================================
(defun my-org-mode-hook()
  (progn
    (global-set-key [C-f12] 'org-toggle-inline-images)
    (setq org-hide-emphasis-markers 1)
    (setq-default fill-column 79)
    (auto-fill-mode 1)))
(add-hook 'org-mode-hook 'my-org-mode-hook)

;;;;;; (lambda ()) can replace 'some-function
;;;;;; (progn) groups actions, returns the result of last one
