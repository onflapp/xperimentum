diff -Nru libs-back-back-0_25_1.orig/Headers/x11/XGGeneric.h libs-back-back-0_25_1/Headers/x11/XGGeneric.h
--- libs-back-back-0_25_1.orig/Headers/x11/XGGeneric.h	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Headers/x11/XGGeneric.h	2019-03-29 15:56:10.365564002 +0200
@@ -116,6 +116,7 @@
   Atom                  net_wm_sync_request_atom;
   Atom                  net_wm_sync_request_counter_atom;
   Atom			miniaturize_atom;
+  Atom			hide_app_atom;
   Atom			win_decor_atom;
   Atom			titlebar_state_atom;
   char			*rootName;
diff -Nru libs-back-back-0_25_1.orig/Headers/x11/XGServerWindow.h libs-back-back-0_25_1/Headers/x11/XGServerWindow.h
--- libs-back-back-0_25_1.orig/Headers/x11/XGServerWindow.h	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Headers/x11/XGServerWindow.h	2019-03-29 15:56:10.366564502 +0200
@@ -57,6 +57,7 @@
     unsigned long extra_flags;
 } GNUstepWMAttributes;
 
+/* Window flags */
 #define GSWindowStyleAttr	(1<<0)
 #define GSWindowLevelAttr	(1<<1)
 #define GSMiniaturizePixmapAttr (1<<3)
@@ -65,14 +66,17 @@
 #define GSCloseMaskAttr		(1<<6)
 #define GSExtraFlagsAttr	(1<<7)
 
+/* Window extra flags */
 #define GSDocumentEditedFlag			(1<<0)
 #define GSWindowWillResizeNotificationsFlag	(1<<1)
-#define GSWindowWillMoveNotificationsFlag 	(1<<2)
+#define GSWindowWillMoveNotificationsFlag	(1<<2)
 #define GSNoApplicationIconFlag			(1<<5)
+
+/* WM functions */
 #define WMFHideOtherApplications		10
 #define WMFHideApplication			12
 
-#define GSMaxWMProtocols 5
+#define GSMaxWMProtocols 6
 
 /* Graphics Driver protocol. Setup in [NSGraphicsContext-contextDevice:] */
 enum {
--- libs-back-back-0_25_1.orig/Source/x11/XGServerWindow.m	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/x11/XGServerWindow.m	2019-03-29 16:08:00.451429501 +0200
@@ -1495,10 +1491,13 @@
       window->protocols[window->numProtocols++] = generic.net_wm_sync_request_atom;
 #endif
     }
-  if ((generic.wm & XGWM_WINDOWMAKER) != 0
-      && (window->win_attrs.window_style & NSMiniaturizableWindowMask) != 0)
+  if ((generic.wm & XGWM_WINDOWMAKER) != 0)
     {
-      window->protocols[window->numProtocols++] = generic.miniaturize_atom;
+      if ((window->win_attrs.window_style & NSMiniaturizableWindowMask) != 0)
+        {
+          window->protocols[window->numProtocols++] = generic.miniaturize_atom;
+        }
+      window->protocols[window->numProtocols++] = generic.hide_app_atom;
     }
   NSAssert1(window->numProtocols <= GSMaxWMProtocols,
 	    @"Too many protocols (%d > GSMaxWMProtocols)",
@@ -1538,6 +1537,7 @@
   generic.net_wm_sync_request_counter_atom = XInternAtom(dpy, "_NET_WM_SYNC_REQUEST_COUNTER", False);
   generic.miniaturize_atom
     = XInternAtom(dpy, "_GNUSTEP_WM_MINIATURIZE_WINDOW", False);
+  generic.hide_app_atom = XInternAtom(dpy, "_GNUSTEP_WM_HIDE_APP", False);
   generic.win_decor_atom = XInternAtom(dpy,"_GNUSTEP_WM_ATTR", False);
   generic.titlebar_state_atom
     = XInternAtom(dpy, "_GNUSTEP_TITLEBAR_STATE", False);
@@ -2717,6 +2717,29 @@
     XIconifyWindow(dpy, window->ident, window->screen);
 }
 
+// Hide
+// Actually this is "hide application" action. However key press may be received
+// by particular window.
+- (BOOL) hidewindow: (int)win
+{
+  gswindow_device_t *window;
+
+  if ((generic.wm & XGWM_WINDOWMAKER) == 0)
+    return NO;
+
+  window = [XGServer _windowWithTag: win];
+  [self _sendRoot: window->root
+             type: XInternAtom(dpy, "_WINDOWMAKER_WM_FUNCTION", False)
+           window: window->ident
+            data0: WMFHideApplication
+            data1: CurrentTime
+            data2: 0
+            data3: 0];
+  XSync(dpy, False);
+
+  return YES;
+}
+
 /**
    Make sure we have the most up-to-date window information and then
    make sure the context has our new information
--- libs-back-back-0_25_1.orig/Source/x11/XGServerEvent.m	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/x11/XGServerEvent.m	2019-03-29 15:56:10.374568502 +0200
@@ -620,6 +711,20 @@
                                data1: 0
                                data2: 0];
                 }
+              else if ((Atom)xEvent.xclient.data.l[0] == generic.hide_app_atom)
+                {
+		  NSDebugLLog(@"Hide", @"%lu application will be hidden", cWin->number);
+                  eventLocation = NSMakePoint(0,0);
+                  e = [NSEvent otherEventWithType: NSAppKitDefined
+                               location: eventLocation
+                               modifierFlags: 0
+                               timestamp: 0
+                               windowNumber: cWin->number
+                               context: gcontext
+                               subtype: GSAppKitAppHide
+                               data1: 0
+                               data2: 0];
+                }
               else if ((Atom)xEvent.xclient.data.l[0]
                 == generic.take_focus_atom)
                 {
