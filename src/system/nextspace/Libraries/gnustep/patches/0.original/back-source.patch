diff -Nru libs-back-back-0_25_1.orig/Source/art/GNUmakefile.preamble libs-back-back-0_25_1/Source/art/GNUmakefile.preamble
--- libs-back-back-0_25_1.orig/Source/art/GNUmakefile.preamble	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/art/GNUmakefile.preamble	2019-03-29 15:56:10.368565502 +0200
@@ -37,7 +37,7 @@
 #ADDITIONAL_CFLAGS = 
 
 # Additional include directories the compiler should search
-ADDITIONAL_INCLUDE_DIRS = -I../../Headers \
+ADDITIONAL_INCLUDE_DIRS += -I../../Headers \
 	-I../$(GNUSTEP_TARGET_DIR) $(GRAPHIC_CFLAGS) \
 
 # Additional LDFLAGS to pass to the linker
diff -Nru libs-back-back-0_25_1.orig/Source/gsc/GNUmakefile.preamble libs-back-back-0_25_1/Source/gsc/GNUmakefile.preamble
--- libs-back-back-0_25_1.orig/Source/gsc/GNUmakefile.preamble	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/gsc/GNUmakefile.preamble	2019-03-29 15:56:10.369566002 +0200
@@ -37,7 +37,7 @@
 #ADDITIONAL_CFLAGS = 
 
 # Additional include directories the compiler should search
-ADDITIONAL_INCLUDE_DIRS = -I../../Headers -I../$(GNUSTEP_TARGET_DIR)
+ADDITIONAL_INCLUDE_DIRS += -I../../Headers -I../$(GNUSTEP_TARGET_DIR)
 
 # Additional LDFLAGS to pass to the linker
 #ADDITIONAL_LDFLAGS =
diff -Nru libs-back-back-0_25_1.orig/Source/x11/XGServerEvent.m libs-back-back-0_25_1/Source/x11/XGServerEvent.m
--- libs-back-back-0_25_1.orig/Source/x11/XGServerEvent.m	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/x11/XGServerEvent.m	2019-03-29 15:56:10.374568502 +0200
@@ -42,6 +42,7 @@
 #include <Foundation/NSUserDefaults.h>
 #include <Foundation/NSRunLoop.h>
 #include <Foundation/NSDebug.h>
+#include <Foundation/NSDistributedNotificationCenter.h>
 
 #include "x11/XGServerWindow.h"
 #include "x11/XGInputServer.h"
@@ -312,6 +313,12 @@
 
 /*
  */
+static NSInteger   clickTime;
+static NSInteger   clickMove;
+static NSInteger   mouseScrollMultiplier;
+static BOOL        swapMouseButtons;
+static NSEventType menuMouseButton;
+static BOOL        menuButtonEnabled;
 - (NSPoint) _XPointToOSPoint: (NSPoint)x for: (void*)window
 {
   gswindow_device_t *win = (gswindow_device_t*)window;
@@ -328,6 +335,54 @@
   return o;
 }
 
+- (void) initializeMouse
+{
+  [self mouseOptionsChanged:nil];
+  [[NSDistributedNotificationCenter defaultCenter]
+    addObserver: self
+       selector: @selector(mouseOptionsChanged:)
+           name: @"GSMouseOptionsDidChangeNotification"
+         object: nil];
+}
+
+- (void) mouseOptionsChanged: (NSNotification *)aNotif
+{
+  NSUserDefaults *defs = [NSUserDefaults standardUserDefaults];
+
+  [defs synchronize];
+
+  clickTime = [defs integerForKey:@"GSDoubleClickTime"];
+  if (clickTime < 250)
+    clickTime = 250;
+  
+  clickMove = [defs integerForKey:@"GSMouseMoveThreshold"];
+  if (clickMove < 3)
+    clickMove = 3;
+
+  mouseScrollMultiplier = [defs integerForKey:@"GSMouseScrollMultiplier"];
+  if (mouseScrollMultiplier == 0)
+    mouseScrollMultiplier = 1;
+
+  if ([defs objectForKey:@"GSMenuButtonEnabled"])
+    menuButtonEnabled = [defs boolForKey:@"GSMenuButtonEnabled"];
+  else
+    menuButtonEnabled = YES;
+
+  if ([defs objectForKey:@"GSMenuButtonEvent"])
+    menuMouseButton = [defs integerForKey:@"GSMenuButtonEvent"];
+  else
+    menuMouseButton = NSRightMouseDown;
+  
+  switch (menuMouseButton)
+    {
+    case NSLeftMouseDown:
+      swapMouseButtons = YES;
+      break;
+    default:
+      swapMouseButtons = NO;
+      break;
+    }
+}
 
 - (void) processEvent: (XEvent *) event
 {
@@ -366,21 +421,21 @@
          */
         {
           BOOL incrementCount = YES;
-
-#define CLICK_TIME 300
-#define CLICK_MOVE 3
+          
+          if (clickTime == 0) [self initializeMouse];
+         
           if (xEvent.xbutton.time
-            >= (unsigned long)(generic.lastClick + CLICK_TIME))
+            >= (unsigned long)(generic.lastClick + clickTime))
             incrementCount = NO;
           else if (generic.lastClickWindow != xEvent.xbutton.window)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) > CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickX - xEvent.xbutton.x) < -CLICK_MOVE)
+          else if ((generic.lastClickX - xEvent.xbutton.x) < -clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) > CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) > clickMove)
             incrementCount = NO;
-          else if ((generic.lastClickY - xEvent.xbutton.y) < -CLICK_MOVE)
+          else if ((generic.lastClickY - xEvent.xbutton.y) < -clickMove)
             incrementCount = NO;
 
           if (incrementCount == YES)
@@ -407,14 +462,30 @@
 
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseDown;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseDown;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseDown;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseDown;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -425,28 +496,28 @@
         else if (xEvent.xbutton.button == generic.upMouse
           && generic.upMouse != 0)
           {
-            deltaY = 1.;
+            deltaY = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.upMouse;
           }
         else if (xEvent.xbutton.button == generic.downMouse
           && generic.downMouse != 0)
           {
-            deltaY = -1.;
+            deltaY = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.downMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollLeftMouse
           && generic.scrollLeftMouse != 0)
           {
-            deltaX = -1.;
+            deltaX = -1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollLeftMouse;
           }
         else if (xEvent.xbutton.button == generic.scrollRightMouse
           && generic.scrollRightMouse != 0)
           {
-            deltaX = 1.;
+            deltaX = 1. * mouseScrollMultiplier;
             eventType = NSScrollWheel;
             buttonNumber = generic.scrollRightMouse;
           }
@@ -455,6 +526,9 @@
             break;                /* Unknown button */
           }
 
+        if (menuButtonEnabled == NO && eventType == menuMouseButton)
+          break; // disabled menu button was pressed
+
         eventFlags = process_modifier_flags(xEvent.xbutton.state);
         // if pointer is grabbed use grab window
         xWin = (grabWindow == 0) ? xEvent.xbutton.window : grabWindow;
@@ -475,7 +549,7 @@
                  */
             if ((cWin->win_attrs.window_style
               & (NSMiniWindowMask | NSIconWindowMask)) != 0
-              && eventType == NSLeftMouseDown && clickCount == 1)
+                && eventType == NSLeftMouseDown /*&& clickCount == 1*/)
               {
                 if (cWin->parent == None)
                   break;
@@ -484,7 +558,8 @@
                 XSendEvent(dpy, cWin->parent, True,
                            ButtonPressMask, &xEvent);
                 XFlush(dpy);
-                break;
+                if (clickCount != 2)
+                  break;
               }
           }
 
@@ -510,14 +585,30 @@
         [self setLastTime: xEvent.xbutton.time];
         if (xEvent.xbutton.button == generic.lMouse)
           {
-            eventType = NSLeftMouseUp;
-            buttonNumber = generic.lMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
+            else
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.rMouse
           && generic.rMouse != 0)
           {
-            eventType = NSRightMouseUp;
-            buttonNumber = generic.rMouse;
+            if (swapMouseButtons)
+              {
+                eventType = NSLeftMouseUp;
+                buttonNumber = generic.lMouse;
+              }
+            else
+              {
+                eventType = NSRightMouseUp;
+                buttonNumber = generic.rMouse;
+              }
           }
         else if (xEvent.xbutton.button == generic.mMouse
           && generic.mMouse != 0)
@@ -620,6 +711,20 @@
                                data1: 0
                                data2: 0];
                 }
+              else if ((Atom)xEvent.xclient.data.l[0] == generic.hide_app_atom)
+                {
+		  NSDebugLLog(@"Hide", @"%lu application will be hidden", cWin->number);
+                  eventLocation = NSMakePoint(0,0);
+                  e = [NSEvent otherEventWithType: NSAppKitDefined
+                               location: eventLocation
+                               modifierFlags: 0
+                               timestamp: 0
+                               windowNumber: cWin->number
+                               context: gcontext
+                               subtype: GSAppKitAppHide
+                               data1: 0
+                               data2: 0];
+                }
               else if ((Atom)xEvent.xclient.data.l[0]
                 == generic.take_focus_atom)
                 {
@@ -1096,8 +1201,7 @@
 
       // keyboard focus entered a window
       case FocusIn:
-        NSDebugLLog(@"NSEvent", @"%lu FocusIn\n",
-                    xEvent.xfocus.window);
+        NSDebugLLog(@"Focus", @"[FocusIn] %lu", xEvent.xfocus.window);
         if (cWin == 0 || xEvent.xfocus.window != cWin->ident)
           {
             generic.cachedWindow
@@ -1105,10 +1209,12 @@
           }
         if (cWin == 0)
           break;
-        NSDebugLLog(@"Focus", @"%lu got focus on %lu\n",
-                    xEvent.xfocus.window, cWin->number);
+        
+        NSDebugLLog(@"Focus", @"[FocusIn] %lu got focus on %lu (root: %lu)",
+                    xEvent.xfocus.window, cWin->number, generic.appRootWindow);
         // Store this for debugging, may not be the real focus window
         generic.currentFocusWindow = cWin->number;
+        generic.desiredFocusWindow = cWin->number;
         if (xEvent.xfocus.serial == generic.focusRequestNumber)
           {
             /*
@@ -1132,18 +1238,26 @@
            * it's not one of ours.
            * If it has gone to our root window - use the icon window.
            * If it has gone to a window - we see if it is one of ours.
+           * If it has gone to our unmapped window - deactivate.
            */
           XGetInputFocus(xEvent.xfocus.display, &fw, &rev);
-          NSDebugLLog(@"NSEvent", @"%lu FocusOut\n",
-                      xEvent.xfocus.window);
-          if (fw != None && fw != PointerRoot)
+          NSDebugLLog(@"Focus", @"[FocusOut] from %lu (parent:%lu) to %lu\n",
+                      xEvent.xfocus.window, cWin ? cWin->parent : 0, fw);
+
+          if (cWin && (fw == cWin->parent) && (cWin->map_state != IsViewable))
+            { // focus switched to WM decorations
+              nswin = GSWindowWithNumber(cWin->number);
+              [self setinputfocus:[[[NSApp mainMenu] window] windowNumber]];
+            }
+          else if (fw != None && fw != PointerRoot)
             {
               generic.cachedWindow = [XGServer _windowForXWindow: fw];
               if (cWin == 0)
                 {
                   generic.cachedWindow = [XGServer _windowForXParent: fw];
                 }
-              if (cWin == 0)
+              
+              if ((cWin == 0) || (cWin->map_state != IsViewable))
                 {
                   nswin = nil;
                 }
@@ -1156,7 +1270,7 @@
             {
               nswin = nil;
             }
-          NSDebugLLog(@"Focus", @"Focus went to %lu (xwin %lu)\n", 
+          NSDebugLLog(@"Focus", @"[FocusOut] focus went to %lu (xwin %lu)\n", 
                       (nswin != nil) ? cWin->number : 0, fw);
 
           // Focus went to a window not in this application.
@@ -1168,7 +1282,7 @@
           // Clean up old focus request
           generic.cachedWindow
               = [XGServer _windowForXWindow: xEvent.xfocus.window];
-          NSDebugLLog(@"Focus", @"%lu lost focus on %lu\n",
+          NSDebugLLog(@"Focus", @"[FocusOut] %lu lost focus on %lu\n",
                       xEvent.xfocus.window, (cWin) ? cWin->number : 0);
           generic.currentFocusWindow = 0;
           if (cWin && generic.desiredFocusWindow == cWin->number)
@@ -1323,8 +1437,7 @@
             // when a window changes state from ummapped to
             // mapped or vice versa
       case MapNotify:
-        NSDebugLLog(@"NSEvent", @"%lu MapNotify\n",
-                    xEvent.xmap.window);
+        NSDebugLLog(@"NSEvent", @"[MapNotify] %lu", xEvent.xmap.window);
         if (cWin == 0 || xEvent.xmap.window != cWin->ident)
           {
             generic.cachedWindow
@@ -1338,7 +1451,7 @@
              * focus, re-do the request.
              */
             if (generic.desiredFocusWindow == cWin->number
-                && generic.focusRequestNumber == 0)
+                && generic.focusRequestNumber == 0 && [NSApp isActive] != NO)
               {
                 NSDebugLLog(@"Focus", @"Refocusing %lu on map notify", 
                             cWin->number);
@@ -1354,8 +1467,7 @@
 
             // Window is no longer visible.
       case UnmapNotify:
-        NSDebugLLog(@"NSEvent", @"%lu UnmapNotify\n",
-                    xEvent.xunmap.window);
+        NSDebugLLog(@"NSEvent", @"[UnmapNotify] %lu", xEvent.xmap.window);
         if (cWin == 0 || xEvent.xunmap.window != cWin->ident)
           {
             generic.cachedWindow
@@ -1810,26 +1922,43 @@
 {
   int key_num;
   NSWindow *key_win;
+  gswindow_device_t *keyWin;
   NSEvent *e = nil;
   key_win = [NSApp keyWindow];
   key_num = [key_win windowNumber];
-  NSDebugLLog(@"Focus", @"take focus:%lu (current=%lu key=%d)",
+  keyWin =  [XGServer _windowWithTag:key_num];
+
+  NSDebugLLog(@"Focus", @"take focus:%lu  (current=%lu key=%d)",
               cWin->number, generic.currentFocusWindow, key_num);
+  {
+    long current_num = generic.currentFocusWindow;
+    long desired_num = generic.desiredFocusWindow;
+    NSDebugLLog(@"Focus",
+                @"[TakeFocus] %lu(%li) {%.0f x %.0f} (current=%lu(%lu)"
+                " desired=%lu(%lu) key=%lu(%d))",
+                cWin->ident, cWin->number,
+                cWin->xframe.size.width, cWin->xframe.size.height,
+                [XGServer _windowWithTag:current_num]->ident, current_num,
+                [XGServer _windowWithTag:desired_num]->ident, desired_num,
+                keyWin->ident, key_num);
+  }
 
-  /* Sometimes window managers lose the setinputfocus on the key window
-   * e.g. when ordering out a window with focus then ordering in the key window.   
-   * it might search for a window until one accepts its take focus request.
-   */
-  if (key_num == cWin->number)
-    cWin->ignore_take_focus = NO;
-  
   /* Invalidate the previous request. It's possible the app lost focus
      before this request was fufilled and we are being focused again,
      or ??? */
-  {
-    generic.focusRequestNumber = 0;
-    generic.desiredFocusWindow = 0;
-  }
+  generic.focusRequestNumber = 0;
+  generic.desiredFocusWindow = 0;
+  
+  if (([NSApp isActive] == NO) &&
+      ([NSApp isHidden] == NO) &&
+      ([[NSApp mainMenu] isTransient] == NO) &&
+      (cWin->number != key_num))
+    {
+      NSDebugLLog(@"Focus", @"[TakeFocus] %lu(%li) activate application.",
+                  cWin->ident, cWin->number);
+      cWin->ignore_take_focus = NO;
+    }
+  
   /* We'd like to send this event directly to the front-end to handle,
      but the front-end polls events so slowly compared the speed at
      which X events could potentially come that we could easily get
@@ -1840,31 +1969,85 @@
       /* This often occurs when hidding an app, since a bunch of
          windows get hidden at once, and the WM is searching for a
          window to take focus after each one gets hidden. */
-      NSDebugLLog(@"Focus", @"WM take focus while hiding");
+      NSDebugLLog(@"Focus",
+                  @"[TakeFocus] %lu(%li): application is in hidden state..",
+                  cWin->ident, cWin->number);
     }
-  else if (cWin->ignore_take_focus == YES)
+  else if ([[NSApp mainMenu] isTransient] != NO) // right-click main menu
+    {
+      /* Do not grab focus from active application if right-click on our 
+         application icon was performed. */
+      NSDebugLLog(@"Focus",
+                  @"[TakeFocus] ignore request for transient application menu.");
+    }
+  else if (cWin->number == key_num && keyWin->map_state != IsUnmapped) // already key window
     {
-      NSDebugLLog(@"Focus", @"Ignoring window focus request");
       cWin->ignore_take_focus = NO;
+      NSDebugLLog(@"Focus", @"[TakeFocus] %lu(%i): is already a key."
+                  " Reasserting focus.", keyWin->ident, key_num);
+      [GSServerForWindow(key_win) setinputfocus: cWin->number];
     }
-  else if (cWin->number == key_num)
+  else if (cWin->ignore_take_focus == YES) // after orderwindow:::
     {
-      NSDebugLLog(@"Focus", @"Reasserting key window");
-      [GSServerForWindow(key_win) setinputfocus: key_num];
+      NSDebugLLog(@"Focus",
+                  @"[TakeFocus] %lu(%li): ignore_take_focus == YES...",
+                  cWin->ident, cWin->number);
+      /* Window was requested to take focus and earlier (orderwindow:::) 
+         was instructed to ignore "Take Focus" requests. Normally, we must 
+         ignore this request. However, key window was unmapped by window manager. 
+         In WindowMaker it happens after workspace switch. 
+         We should grab focus to have keyboard input. */
+      cWin->ignore_take_focus = NO;
+      if (key_num && keyWin->map_state == IsUnmapped)
+        {
+          NSDebugLLog(@"Focus",
+                      @"[TakeFocus] ...%lu(%li): key window was unmapped"
+                      " - setinputfocus to self", cWin->ident, cWin->number);
+          [GSServerForWindow(key_win) setinputfocus: cWin->number];
+        }
     }
-  else if (key_num 
-           && cWin->number == [[[NSApp mainMenu] window] windowNumber])
+  else if (key_win &&
+           cWin->number == [[[NSApp mainMenu] window] windowNumber]) // main menu
     {
       /* This might occur when the window manager just wants someone
          to become key, so it tells the main menu (typically the first
          menu in the list), but since we already have a window that
          was key before, use that instead */
-      NSDebugLLog(@"Focus", @"Key window is already %d", key_num);
-      [GSServerForWindow(key_win) setinputfocus: key_num];
+      NSDebugLLog(@"Focus",
+                  @"[TakeFocus] %lu(%li): main menu. Key window is already"
+                  " set to: %lu(%d)...",
+                  cWin->ident, cWin->number, keyWin->ident, key_num);
+      
+      if (keyWin->map_state == IsUnmapped)
+        {
+        NSDebugLLog(@"Focus", @"[TakeFocus] ...%lu(%li): key window was unmapped"
+                    " - setinputfocus to self", cWin->ident, cWin->number);
+        [GSServerForWindow(key_win) setinputfocus: cWin->number];
+        }
+      else
+        {
+          /* If key window is visible and didn't receive TakeFocus message yet
+             set input focus to it. Otherwise, if application will be deactivated 
+             and key window receive TakeFocus, nothing happens because:
+             - NSApplication resigns key window on deactivation;
+             - key window has `ignore_take_focus == YES`;
+             So click on key window of inactive application will be ignored 
+             because of ignore_take_focus == YES.
+             Test to observe incorrect behaviour without code below in NEXTSPACE:
+             - workspace 1, Workspace app active;
+             - switch to workspace 2 - Workspace app menu only visible;
+             - switch back to workspace 1 - Workspace app active;
+             - launch menu-only app - TextEdit;
+             - click on titlebar of unfocused "File Viewer".
+          */
+          NSDebugLLog(@"Focus",
+                      @"[TakeFocus] ...%lu(%li):  setinputfocus to key: %lu(%d)",
+                      cWin->ident, cWin->number, keyWin->ident, key_num);
+          [GSServerForWindow(key_win) setinputfocus: key_num];
+      }
     }
   else
     {
-      NSPoint eventLocation;
       /*
        * Here the app asked for this (if key_win==nil) or there was a
        * click on the title bar or some other reason (window mapped,
@@ -1872,17 +2055,20 @@
        * last reason but we just have to deal with that since we can
        * never be sure if it's necessary.
        */
-      eventLocation = NSMakePoint(0,0);
-      e = [NSEvent otherEventWithType:NSAppKitDefined
-                   location: eventLocation
-                   modifierFlags: 0
-                   timestamp: 0
-                   windowNumber: cWin->number
-                   context: gcontext
-                   subtype: GSAppKitWindowFocusIn
-                   data1: 0
-                   data2: 0];
+      NSDebugLLog(@"Focus",
+                  @"[TakeFocus] Creating NSEvent for: %lu(%li)",
+                  cWin->ident, cWin->number);
+      e = [NSEvent otherEventWithType: NSAppKitDefined
+                             location: NSMakePoint(0,0)
+                        modifierFlags: 0
+                            timestamp: 0
+                         windowNumber: cWin->number
+                              context: gcontext
+                              subtype: GSAppKitWindowFocusIn
+                                data1: 0
+                                data2: 0];
     }
+  
   return e;
 }
 
diff -Nru libs-back-back-0_25_1.orig/Source/x11/XGServer.m libs-back-back-0_25_1/Source/x11/XGServer.m
--- libs-back-back-0_25_1.orig/Source/x11/XGServer.m	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/x11/XGServer.m	2019-03-29 15:56:10.376569502 +0200
@@ -40,6 +40,7 @@
 #include <Foundation/NSString.h>
 #include <Foundation/NSUserDefaults.h>
 #include <Foundation/NSDebug.h>
+#include <Foundation/NSDistributedNotificationCenter.h>
 
 #include <signal.h>
 /* Terminate cleanly if we get a signal to do so */
@@ -487,6 +488,7 @@
 - (void) dealloc
 {
   NSDebugLog(@"Destroying X11 Server");
+  [[NSDistributedNotificationCenter defaultCenter] removeObserver:self];
   DESTROY(inputServer);
   [self _destroyServerWindows];
   NSFreeMapTable(screenList);
diff -Nru libs-back-back-0_25_1.orig/Source/x11/XGServerWindow.m libs-back-back-0_25_1/Source/x11/XGServerWindow.m
--- libs-back-back-0_25_1.orig/Source/x11/XGServerWindow.m	2017-04-07 00:03:43.000000000 +0300
+++ libs-back-back-0_25_1/Source/x11/XGServerWindow.m	2019-03-29 16:08:00.451429501 +0200
@@ -122,11 +122,6 @@
       return nil;
     }
 
-/*
-  We should rather convert the image to a bitmap representation here via 
-  the following code, but this is currently not supported by the libart backend
-
-{
   NSSize size = [image size];
 
   [image lockFocus];
@@ -134,9 +129,9 @@
             NSMakeRect(0, 0, size.width, size.height)];
   AUTORELEASE(rep);
   [image unlockFocus];
-} 
-*/
 
+  return rep;
+/*
   rep = (NSBitmapImageRep *)[image bestRepresentationForDevice: nil];
   if (!rep || ![rep respondsToSelector: @selector(samplesPerPixel)])
     {
@@ -154,6 +149,7 @@
                                     bytesPerRow: 0
                                    bitsPerPixel: 0];
     }
+*/
 }
 
 
@@ -1495,10 +1491,13 @@
       window->protocols[window->numProtocols++] = generic.net_wm_sync_request_atom;
 #endif
     }
-  if ((generic.wm & XGWM_WINDOWMAKER) != 0
-      && (window->win_attrs.window_style & NSMiniaturizableWindowMask) != 0)
+  if ((generic.wm & XGWM_WINDOWMAKER) != 0)
     {
-      window->protocols[window->numProtocols++] = generic.miniaturize_atom;
+      if ((window->win_attrs.window_style & NSMiniaturizableWindowMask) != 0)
+        {
+          window->protocols[window->numProtocols++] = generic.miniaturize_atom;
+        }
+      window->protocols[window->numProtocols++] = generic.hide_app_atom;
     }
   NSAssert1(window->numProtocols <= GSMaxWMProtocols,
 	    @"Too many protocols (%d > GSMaxWMProtocols)",
@@ -1538,6 +1537,7 @@
   generic.net_wm_sync_request_counter_atom = XInternAtom(dpy, "_NET_WM_SYNC_REQUEST_COUNTER", False);
   generic.miniaturize_atom
     = XInternAtom(dpy, "_GNUSTEP_WM_MINIATURIZE_WINDOW", False);
+  generic.hide_app_atom = XInternAtom(dpy, "_GNUSTEP_WM_HIDE_APP", False);
   generic.win_decor_atom = XInternAtom(dpy,"_GNUSTEP_WM_ATTR", False);
   generic.titlebar_state_atom
     = XInternAtom(dpy, "_GNUSTEP_TITLEBAR_STATE", False);
@@ -2126,8 +2126,7 @@
 
   // For window managers supporting EWMH, but not Window Maker, 
   // where we use a different solution, set the window icon.
-  if (((generic.wm & XGWM_EWMH) != 0)
-    && ((generic.wm & XGWM_WINDOWMAKER) == 0))
+  if ((generic.wm & XGWM_EWMH) != 0)
     {
       [self _setNetWMIconFor: window->ident];
     }
@@ -2659,6 +2658,7 @@
   return generic.flags.appOwnsMiniwindow;
 }
 
+// Miniaturize
 - (void) miniwindow: (int) win
 {
   gswindow_device_t	*window;
@@ -2717,6 +2717,29 @@
     XIconifyWindow(dpy, window->ident, window->screen);
 }
 
+// Hide
+// Actually this is "hide application" action. However key press may be received
+// by particular window.
+- (BOOL) hidewindow: (int)win
+{
+  gswindow_device_t *window;
+
+  if ((generic.wm & XGWM_WINDOWMAKER) == 0)
+    return NO;
+
+  window = [XGServer _windowWithTag: win];
+  [self _sendRoot: window->root
+             type: XInternAtom(dpy, "_WINDOWMAKER_WM_FUNCTION", False)
+           window: window->ident
+            data0: WMFHideApplication
+            data1: CurrentTime
+            data2: 0
+            data3: 0];
+  XSync(dpy, False);
+
+  return YES;
+}
+
 /**
    Make sure we have the most up-to-date window information and then
    make sure the context has our new information
@@ -2745,7 +2768,7 @@
     && (window->buffer_width != width || window->buffer_height != height)
     && (window->gdriverProtocol & GDriverHandlesBacking) == 0)
     {
-      [isa waitAllContexts];
+      [object_getClass(self) waitAllContexts];
       XFreePixmap(dpy, window->buffer);
       window->buffer = 0;
       if (window->alpha_buffer)
@@ -2930,6 +2953,34 @@
        */
       if ((window->win_attrs.window_style & NSIconWindowMask) != 0)
 	{
+          NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
+          if (op != NSWindowOut && window->map_state == IsUnmapped &&
+              [[defaults objectForKey: @"NXAutoLaunch"] isEqualToString:@"YES"])
+ 	    {
+              // window->ignore_take_focus = YES; // <<<<
+              {
+                // Window info_win = wsmap->scr->info_window;
+                XEvent ev;
+
+                ev.xclient.type = ClientMessage;
+                // WM/src/startup.c
+                ev.xclient.message_type = XInternAtom(dpy,"WM_IGNORE_FOCUS_EVENTS", False);
+                ev.xclient.format = 32;
+                
+                // Inform WM to ignore focus events
+                ev.xclient.data.l[0] = True;
+                XSendEvent(dpy, ROOT, True, EnterWindowMask, &ev);
+
+                // Action
+                XMapWindow(dpy, ROOT); // <<<<
+
+                // Inform WM to process focus events again
+                ev.xclient.data.l[0] = False;
+                XSendEvent(dpy, ROOT, True, EnterWindowMask, &ev);
+              }
+              // window->ignore_take_focus = NO; // <<<<
+ 	    }
+
 	  return;
 	}
       if ((window->win_attrs.window_style & NSMiniWindowMask) != 0)
@@ -3378,12 +3429,16 @@
               skipTaskbar = YES;
             }
           else if (level == NSSubmenuWindowLevel
-                   || level == NSFloatingWindowLevel
                    || level == NSTornOffMenuWindowLevel)
             {
               data[0] = generic.wintypes.win_menu_atom;
               skipTaskbar = YES;
             }
+          else if (level == NSFloatingWindowLevel)
+            {
+              data[0] = generic.wintypes.win_utility_atom;
+              len = 1;
+            }
           else if (level == NSDockWindowLevel
                    || level == NSStatusWindowLevel)
             {
@@ -3623,7 +3678,7 @@
       values.foreground = window->xwn_attrs.background_pixel;
       valuemask = (GCFunction | GCPlaneMask | GCClipMask | GCForeground);
       XChangeGC(dpy, window->gc, valuemask, &values);
-      [isa waitAllContexts];
+      [object_getClass(self) waitAllContexts];
       if ((window->gdriverProtocol & GDriverHandlesExpose))
 	{
 	  /* Temporary protocol until we standardize the backing buffer */
@@ -3698,7 +3753,7 @@
 
   if (width > 0 || height > 0)
     {
-      [isa waitAllContexts];
+      [object_getClass(self) waitAllContexts];
       if ((window->gdriverProtocol & GDriverHandlesBacking))
 	{
 	  NSDebugLLog (@"XGFlush", 
@@ -4276,25 +4331,31 @@
       cursor = XCreateFontCursor(dpy, XC_crosshair);
       break;
     case GSDisappearingItemCursor:
-      cursor = XCreateFontCursor(dpy, XC_shuttle);
+      cursor = XCreateFontCursor(dpy, XC_pirate);
       break;
-    case GSPointingHandCursor:
+    case GSClosedHandCursor:
+      cursor = XCreateFontCursor(dpy, XC_fleur);
+      break;
+    case GSOpenHandCursor:
       cursor = XCreateFontCursor(dpy, XC_hand1);
       break;
+    case GSPointingHandCursor:
+      cursor = XCreateFontCursor(dpy, XC_hand2);
+      break;
     case GSResizeDownCursor:
-      cursor = XCreateFontCursor(dpy, XC_bottom_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_down_arrow);
       break;
     case GSResizeLeftCursor:
-      cursor = XCreateFontCursor(dpy, XC_left_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_left_arrow);
       break;
     case GSResizeLeftRightCursor:
       cursor = XCreateFontCursor(dpy, XC_sb_h_double_arrow);
       break;
     case GSResizeRightCursor:
-      cursor = XCreateFontCursor(dpy, XC_right_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_right_arrow);
       break;
     case GSResizeUpCursor:
-      cursor = XCreateFontCursor(dpy, XC_top_side);
+      cursor = XCreateFontCursor(dpy, XC_sb_up_arrow);
       break;
     case GSResizeUpDownCursor:
       cursor = XCreateFontCursor(dpy, XC_sb_v_double_arrow);
@@ -4373,7 +4434,7 @@
     // FIXME: Factor this out
     // Convert RGBA unpacked to ARGB packed
     // NB Packed ARGB values are layed out as ARGB on big endian systems
-    // and as BDRA on low endian systems
+    // and as BGRA on low endian systems
     {
       NSInteger stride;
       NSInteger x, y;
