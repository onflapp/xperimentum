diff -Nru libs-gui-gui-0_25_1.orig/Source/GSDragView.m libs-gui-gui-0_25_1/Source/GSDragView.m
--- libs-gui-gui-0_25_1.orig/Source/GSDragView.m	2017-04-07 00:03:24.000000000 +0300
+++ libs-gui-gui-0_25_1/Source/GSDragView.m	2019-03-29 15:43:37.556347500 +0200
@@ -510,20 +510,26 @@
     {
     case NSDragOperationNone:
       name = @"NoCursor";
-      iname = @"common_noCursor";
+      iname = @"dragNoneCursor";
       break;
     case NSDragOperationCopy:
       name = @"CopyCursor";
-      iname = @"common_copyCursor";
+      iname = @"dragCopyCursor";
       break;
     case NSDragOperationLink:
       name = @"LinkCursor";
-      iname = @"common_linkCursor";
+      iname = @"dragLinkCursor";
       break;
-    case NSDragOperationGeneric:
+    case NSDragOperationDelete:
+      name = @"DeleteCursor";
+      iname = @"dragDeleteCursor";
       break;
     default:
-      // FIXME: Should not happen, add warning?
+      if (targetWindowRef != 0)
+        {
+          name = @"MoveCursor";
+          iname = @"dragMoveCursor";
+        }
       break;
     }
 
@@ -544,7 +550,6 @@
       newCursor = [cursors objectForKey: name];
       if (newCursor == nil)
 	{
-	  /* Make our own arrow cursor, since we want to color it */
 	  void *c;
 	  
 	  newCursor = [[NSCursor alloc] initWithImage: nil];
@@ -554,19 +559,6 @@
 	  RELEASE(newCursor);
 	}
     }
-  
-  if ((targetWindowRef != 0) && mask != NSDragOperationNone)
-    {
-      [GSCurrentServer() recolorcursor: [NSColor greenColor] 
-		      : [NSColor blackColor] 
-		      : [newCursor _cid]];
-    }
-  else
-    {
-      [GSCurrentServer() recolorcursor: [NSColor blackColor] 
-		      : [NSColor whiteColor] 
-		      : [newCursor _cid]];
-    }
 
   [newCursor set];
 }
diff -Nru libs-gui-gui-0_25_1.orig/Source/NSApplication.m libs-gui-gui-0_25_1/Source/NSApplication.m
--- libs-gui-gui-0_25_1.orig/Source/NSApplication.m	2017-04-07 00:03:24.000000000 +0300
+++ libs-gui-gui-0_25_1/Source/NSApplication.m	2019-03-29 15:43:37.560349500 +0200
@@ -433,6 +433,11 @@
   return NO;
 }
 
+- (BOOL) becomesKeyOnlyIfNeeded
+{
+  return YES;
+}
+
 - (BOOL) worksWhenModal
 {
   return YES;
@@ -541,6 +546,11 @@
   return YES;
 }
 
+- (BOOL) needsPanelToBecomeKey
+{
+  return NO;
+}
+
 - (void) concludeDragOperation: (id<NSDraggingInfo>)sender
 {
 }
@@ -1334,6 +1344,13 @@
           postNotificationName: NSApplicationDidBecomeActiveNotification
 		      object: [NSWorkspace sharedWorkspace]
           userInfo: info];
+
+      if ([[[NSUserDefaults standardUserDefaults]
+             objectForKey: @"NXAutoLaunch"] isEqualToString: @"YES"])
+        {
+          _app_is_active = NO;
+          [[NSUserDefaults standardUserDefaults] removeSuiteNamed: NSArgumentDomain];
+        }
     }
 }
 
@@ -2456,31 +2473,35 @@
 	      _hidden_main = [self mainWindow];
 	      [_hidden_main resignMainWindow];
 	    }
+          
+          win = [[self mainMenu] window];
+          if ([GSServerForWindow(win) hidewindow: [win windowNumber]] == NO)
+            {
+              windows_list = GSOrderedWindows();
+              iter = [windows_list reverseObjectEnumerator];
 	  
-	  windows_list = GSOrderedWindows();
-	  iter = [windows_list reverseObjectEnumerator];
-	  
-	  while ((win = [iter nextObject]))
-	    {
-	      if ([win isVisible] == NO && ![win isMiniaturized])
-		{
-		  continue;		/* Already invisible	*/
-		}
-	      if ([win canHide] == NO)
-		{
-		  continue;		/* Not hideable	*/
-		}
-	      if (win == _app_icon_window)
-		{
-		  continue;		/* can't hide the app icon.	*/
-		}
-	      if (_app_is_active == YES && [win hidesOnDeactivate] == YES)
-		{
-		  continue;		/* Will be hidden by deactivation	*/
-		}
-	      [_hidden addObject: win];
-	      [win orderOut: self];
-	    }
+              while ((win = [iter nextObject]))
+                {
+                  if ([win isVisible] == NO && ![win isMiniaturized])
+                    {
+                      continue;		/* Already invisible	*/
+                    }
+                  if ([win canHide] == NO)
+                    {
+                      continue;		/* Not hideable	*/
+                    }
+                  if (win == _app_icon_window)
+                    {
+                      continue;		/* can't hide the app icon.	*/
+                    }
+                  if (_app_is_active == YES && [win hidesOnDeactivate] == YES)
+                    {
+                      continue;		/* Will be hidden by deactivation	*/
+                    }
+                  [_hidden addObject: win];
+                  [win orderOut: self];
+                }
+            }
 	  _app_is_hidden = YES;
 	  
 	  if (YES == [[NSUserDefaults standardUserDefaults]
diff -Nru libs-gui-gui-0_25_1.orig/Source/NSMenuItemCell.m libs-gui-gui-0_25_1/Source/NSMenuItemCell.m
--- libs-gui-gui-0_25_1.orig/Source/NSMenuItemCell.m	2017-04-07 00:03:24.000000000 +0300
+++ libs-gui-gui-0_25_1/Source/NSMenuItemCell.m	2019-03-29 15:43:37.562350500 +0200
@@ -46,6 +46,7 @@
 #import "AppKit/NSMenuItemCell.h"
 #import "AppKit/NSMenuView.h"
 #import "AppKit/NSParagraphStyle.h"
+#import "AppKit/NSStringDrawing.h"
 #import "GNUstepGUI/GSTheme.h"
 #import "GSGuiPrivate.h"
 
@@ -255,6 +256,7 @@
   if (m != 0)
     {
       BOOL shift;
+      NSFontTraitMask traits = 0;
       // shift mask and not an upper case string?
       shift = (m & NSShiftKeyMask) & ![key isEqualToString: ucKey];
       key = [NSString stringWithFormat:@"%@%@%@%@%@",
@@ -263,11 +265,46 @@
                       shift ? shiftKeyString : @"",
                       (m & NSCommandKeyMask) ? commandKeyString : @"",
                       key];
+      if (m & NSAlternateKeyMask)
+        traits |= NSItalicFontMask;
+
+      if (m & NSControlKeyMask)
+        traits |= NSBoldFontMask;
+
+      if (traits)
+        {
+          NSFont *font;
+          
+          font = [[NSFontManager sharedFontManager]
+                           fontWithFamily:[[NSFont controlContentFontOfSize:0.0] familyName]
+                                   traits:traits
+                                   weight:(traits & NSBoldFontMask) ? 9 : 5
+                                     size:[NSFont systemFontSize]];
+          if (font)
+            [self setKeyEquivalentFont:font];
+        }
     }
 
   return key;
 }
 
+- (NSSize) _sizeKeyEquivalentText: (NSString*)title
+{
+  NSSize size;
+
+  if (title == nil) {
+      return NSMakeSize (0,0);
+    }
+
+  if (_keyEquivalentFont) {
+    size = [title sizeWithAttributes: @{NSFontAttributeName: _keyEquivalentFont}];
+  }
+  else {
+    size = [self _sizeText: title];
+  }
+  return size;
+}
+
 - (void) calcSize
 {
   NSSize   componentSize;
@@ -339,7 +376,7 @@
   _titleWidth = componentSize.width;
   if (componentSize.height > neededMenuItemHeight)
     neededMenuItemHeight = componentSize.height;
-  componentSize = [self _sizeText: [self _keyEquivalentString]];
+  componentSize = [self _sizeKeyEquivalentText: [self _keyEquivalentString]];
   _keyEquivalentWidth = componentSize.width;
   if (componentSize.height > neededMenuItemHeight)
     neededMenuItemHeight = componentSize.height;
@@ -735,8 +772,17 @@
    * else they would be displayed one over the other one.
    */
   else if (![[_menuView menu] _ownedByPopUp] || (_imageToDisplay == nil))
-    {    
-      [self _drawText: [self _keyEquivalentString] inFrame: cellFrame];
+    {
+      if (_keyEquivalentFont != nil) {
+        NSAttributedString *aString;
+        
+        aString = [[NSAttributedString alloc] initWithString: [self _keyEquivalentString]
+                                                  attributes: @{NSFontAttributeName: _keyEquivalentFont}];
+        [self _drawAttributedText: aString inFrame: cellFrame];
+      }
+      else {
+        [self _drawText: [self _keyEquivalentString] inFrame: cellFrame];
+      }
     }
 }
 
diff -Nru libs-gui-gui-0_25_1.orig/Source/NSMenu.m libs-gui-gui-0_25_1/Source/NSMenu.m
--- libs-gui-gui-0_25_1.orig/Source/NSMenu.m	2017-04-07 00:03:24.000000000 +0300
+++ libs-gui-gui-0_25_1/Source/NSMenu.m	2019-03-29 15:47:01.688362500 +0200
@@ -1839,9 +1839,14 @@
 {
   if ([self _isMain])
   {
-    [self display];
-    // we must make sure that any attached submenu is visible too.
-    [[self attachedMenu] display];
+    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
+  
+    if (![[defaults objectForKey: @"NXAutoLaunch"] isEqualToString:@"YES"])
+      {
+        [self display];
+        // we must make sure that any attached submenu is visible too.
+        [[self attachedMenu] display];
+      }
   }
 }
 
diff -Nru libs-gui-gui-0_25_1.orig/Source/NSWindow.m libs-gui-gui-0_25_1/Source/NSWindow.m
--- libs-gui-gui-0_25_1.orig/Source/NSWindow.m	2017-04-07 00:03:24.000000000 +0300
+++ libs-gui-gui-0_25_1/Source/NSWindow.m	2019-03-29 15:43:37.573355999 +0200
@@ -479,7 +479,7 @@
   
   iconSize = GSGetIconSize();
   
-  tileImage = [[GSCurrentServer() iconTileImage] copy];
+  tileImage = [[NSImage imageNamed:@"common_MiniWindowTile"] copy];
   [tileImage setScalesWhenResized: YES];
   [tileImage setSize: iconSize];
   
@@ -512,8 +512,8 @@
                                  iconSize.width - ((iconSize.width / 8) * 2),
                                  iconSize.height - ((iconSize.height / 8) * 2))
               inView: self];
-  [titleCell drawWithFrame: NSMakeRect(1, iconSize.height - 12,
-                                       iconSize.width - 2, 11)
+  [titleCell drawWithFrame: NSMakeRect(2, iconSize.height - 12,
+                                       iconSize.width - 3, 10)
                     inView: self];
 }
 
@@ -606,7 +606,7 @@
       [titleCell setDrawsBackground: YES];
       [titleCell setBackgroundColor: [NSColor blackColor]];
       [titleCell setTextColor: [NSColor whiteColor]];
-      [titleCell setFont: [NSFont systemFontOfSize: 8]];
+      [titleCell setFont: [NSFont systemFontOfSize: 9]];
     }
   else
     {
@@ -4222,6 +4222,10 @@
               [self performMiniaturize: NSApp];
               break;
 
+            case GSAppKitAppHide:
+              [NSApp hide: self];
+              break;
+
             case GSAppKitWindowFocusIn:
               if (_f.is_miniaturized)
 		{
@@ -4239,8 +4243,8 @@
               if ([self canBecomeKeyWindow] == YES)
 		{
 		  NSDebugLLog(@"Focus", @"Making %d key", (int)_windowNum);
-		  [self makeKeyWindow];
-		  [self makeMainWindow];
+                  [self makeKeyWindow];
+                  [self makeMainWindow];
 		  [NSApp activateIgnoringOtherApps: YES];
 		}
               if (self == [[NSApp mainMenu] window])
