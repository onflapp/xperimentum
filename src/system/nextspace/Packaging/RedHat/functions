# -*-Shell-script-*-
#

export ARCH=`uname -m`
export CWD=`pwd`
export SOURCES_DIR=~/rpmbuild/SOURCES
export SPECS_DIR=~/rpmbuild/SPECS
export RPMS_DIR=~/rpmbuild/RPMS/$ARCH
if [ -f /etc/os-release ]; then 
    source /etc/os-release;
    export RELEASE_USR="$CWD/$ID-$VERSION_ID/NSUser"
    export RELEASE_DEV="$CWD/$ID-$VERSION_ID/NSDeveloper"
    export OS_ID=$ID
    export OS_VERSION=$VERSION_ID
    export OS_NAME=$NAME
    mkdir -p ${RELEASE_USR}
    mkdir -p ${RELEASE_DEV}
fi

prepare_environment() 
{
    print_H1 " Prepare build environment"
    print_H2 "===== Create rpmbuild directories..."
    mkdir -p $SOURCES_DIR
    mkdir -p $SPECS_DIR

    print_H2 "===== Install RPM build tools..."
    rpm -q rpm-build 2>&1 > /dev/null
    if [ $? -eq 1 ]; then BUILD_TOOLS+=" rpm-build"; fi
    rpm -q rpmdevtools 2>&1 > /dev/null
    if [ $? -eq 1 ]; then BUILD_TOOLS+=" rpmdevtools"; fi
    rpm -q make 2>&1 > /dev/null
    if [ $? -eq 1 ]; then BUILD_TOOLS+=" make"; fi
    rpm -q patch 2>&1 > /dev/null
    if [ $? -eq 1 ]; then BUILD_TOOLS+=" patch"; fi

    if [ -f /etc/os-release ]; then 
        if [ $OS_ID == "centos" ];then
            if [ $OS_VERSION == "7" ];then
                yum repolist | grep "epel/" 2>&1 > /dev/null
                if [ $? -eq 1 ]; then
                    BUILD_TOOLS+=" https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm";
                fi
                rpm -q centos-release-scl 2>&1 > /dev/null
                if [ $? -eq 1 ]; then BUILD_TOOLS+=" centos-release-scl"; fi
                rpm -q centos-release-scl-rh 2>&1 > /dev/null
                if [ $? -eq 1 ]; then BUILD_TOOLS+=" centos-release-scl-rh"; fi
            fi
            if [ $OS_VERSION == "8" ];then
                # Could be "CentOS Linux" or "CentOS Stream"
                if [ "$OS_NAME" == "CentOS Stream" ]; then
                    yum config-manager --set-enabled powertools
                else
                    yum config-manager --set-enabled PowerTools
                fi
                rpm -q epel-release 2>&1 > /dev/null
                if [ $? -eq 1 ]; then BUILD_TOOLS+=" epel-release"; fi
                rpm -q dnf-plugins-core 2>&1 > /dev/null
                if [ $? -eq 1 ]; then BUILD_TOOLS+=" dnf-plugins-core"; fi
                rpm -q git 2>&1 > /dev/null
                if [ $? -eq 1 ]; then BUILD_TOOLS+=" git"; fi
            fi
        fi
    else
        print_H2 ">>>>> Can't find /etc/os-release - this OS is unsupported."
        return 1
    fi
    
    if [ "${BUILD_TOOLS}" != "" ]; then
        sudo yum -y install ${BUILD_TOOLS}
    fi
}

rpm_version()
{
    echo `rpmspec -q --qf "%{version}-%{release}.%{arch}:" $1 | awk -F: '{print $1}'`
}

# $1 - path to spec file
build_rpm()
{
    SPEC_FILE=$1
    spectool -g -R ${SPEC_FILE}
    DEPS=`rpmspec -q --buildrequires ${SPEC_FILE} | awk -c '{print $1}'`
    sudo yum -y install ${DEPS}
    rpmbuild -bb ${SPEC_FILE}
}

# $1 - package name, $2 - rpm file path
install_rpm()
{
    rpm -q $1 2>&1 > /dev/null
    if [ $? -eq 1 ]; then 
        INST_CMD=install
    else
        INST_CMD=reinstall
    fi
    sudo yum -y $INST_CMD $2
}

# Bold
print_H1()
{
    echo -e -n "\e[1m"
    echo "================================================================================"
    echo -e -n "\e[1m"
    echo -e "$1"
    echo -e -n "\e[1m"
    echo "================================================================================"
    echo -e -n "\e[0m"
}

# Brown
print_H2()
{
    echo -e -n "\e[33m"
    echo -e "$1"
    echo -e -n "\e[0m"
}

# Green
print_OK()
{
    echo -e -n "\e[32m"
    echo "================================================================================"
    echo -e -n "\e[32m"
    echo -e "$1"
    echo -e -n "\e[32m"
    echo "================================================================================"
    echo -e -n "\e[0m"
}

# Red
print_ERR()
{
    echo -e -n "\e[31m"
    echo "================================================================================"
    echo -e -n "\e[31m"
    echo -e "$1"
    echo -e -n "\e[31m"
    echo "================================================================================"
    echo -e -n "\e[0m"
}

print_help()
{
    SCRIPT_NAME=`basename $0`
    print_ERR " ERROR: No NEXTSPACE directory specified."
    printf "\n"
    print_H2 "You have to specify directory where NEXTSPACE git clone resides."
    print_H2 "For example, consider this scenario:"
    printf "\n"
    print_H2 "$ git clone https://github.com/trunkmaster/nextspace"
    print_H2 "$ cd nextspace"
    print_H2 "$ ./scripts/$SCRIPT_NAME ~/nextspace"
    printf "\n"
}

